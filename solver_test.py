import numpy as np
from temp import KillerSudoku


def test_regular():
    input_data = np.array([(5, 1, 1), (6, 2, 1), (8, 4, 1), (4, 5, 1),
                           (7, 6, 1), (3, 1, 2), (9, 3, 2), (6, 7, 2),
                           (8, 3, 3), (1, 2, 4), (8, 5, 4), (4, 8, 4),
                           (7, 1, 5), (9, 2, 5), (6, 4, 5), (2, 6, 5),
                           (1, 8, 5), (8, 9, 5), (5, 2, 6), (3, 5, 6),
                           (9, 8, 6), (2, 7, 7), (6, 3, 8), (8, 7, 8),
                           (7, 9, 8), (3, 4, 9), (1, 5, 9), (6, 6, 9),
                           (5, 8, 9)
                           ])

    solution = np.array([[9, 2, 5, 8, 6, 7, 3, 4, 1, ],
                         [8, 7, 4, 5, 3, 1, 6, 2, 9, ],
                         [3, 1, 6, 2, 9, 4, 8, 7, 5, ],
                         [5, 6, 3, 9, 8, 2, 4, 1, 7, ],
                         [4, 9, 7, 6, 1, 3, 2, 5, 8, ],
                         [2, 8, 1, 7, 4, 5, 9, 6, 3, ],
                         [1, 3, 9, 4, 7, 6, 5, 8, 2, ],
                         [6, 5, 8, 1, 2, 9, 7, 3, 4, ],
                         [7, 4, 2, 3, 5, 8, 1, 9, 6, ]])

    sudoku = KillerSudoku()

    for val, row, column in input_data:
        sudoku.grid[row - 1, column - 1] = val
    sudoku.solve()

    assert solution.shape == sudoku.grid.shape
    assert (solution == sudoku.grid).all()


def test_killer():
    groups = [(6, [(0, 0), (1, 0), (2, 0)]), (15, [(0, 1), (1, 1), (1, 2)]), (12, [(0, 2), (0, 3)]),
              (18, [(0, 4), (0, 5), (1, 4)]), (9, [(0, 6), (0, 7)]), (19, [(0, 8), (1, 8), (2, 8)]),
              (17, [(1, 3), (2, 3), (2, 4)]), (12, [(1, 5), (1, 6), (2, 5)]), (5, [(1, 7), (2, 7)]),
              (15, [(2, 1), (3, 1)]),
              (14, [(2, 2), (3, 2), (3, 3)]), (11, [(2, 6), (3, 6)]), (13, [(3, 0), (4, 0)]),
              (12, [(3, 4), (4, 4), (5, 4)]), (17, [(3, 5), (4, 5)]), (9, [(3, 7), (3, 8)]), (4, [(4, 1), (4, 2)]),
              (6, [(4, 3), (5, 3)]), (9, [(4, 6), (4, 7)]), (9, [(4, 8), (5, 8)]), (14, [(5, 0), (5, 1)]),
              (8, [(5, 2), (6, 2)]), (12, [(5, 5), (5, 6), (6, 6)]), (13, [(5, 7), (6, 7)]),
              (18, [(6, 0), (7, 0), (8, 0)]),
              (10, [(6, 1), (7, 1)]), (23, [(6, 3), (7, 3), (7, 2)]), (14, [(6, 4), (6, 5), (7, 5)]),
              (16, [(6, 8), (7, 8), (8, 8)]), (13, [(7, 4), (8, 4), (8, 3)]), (14, [(7, 6), (7, 7), (8, 7)]),
              (6, [(8, 1), (8, 2)]), (12, [(8, 5), (8, 6)])]

    solution = np.array([[2, 4, 7, 5, 3, 6, 8, 1, 9, ],
                         [3, 5, 6, 8, 9, 1, 7, 2, 4, ],
                         [1, 8, 9, 7, 2, 4, 5, 3, 6, ],
                         [4, 7, 2, 3, 5, 9, 6, 8, 1, ],
                         [9, 3, 1, 2, 6, 8, 4, 5, 7, ],
                         [8, 6, 5, 4, 1, 7, 3, 9, 2, ],
                         [6, 1, 3, 9, 7, 5, 2, 4, 8, ],
                         [5, 9, 8, 6, 4, 2, 1, 7, 3, ],
                         [7, 2, 4, 1, 8, 3, 9, 6, 5, ], ])

    sudoku = KillerSudoku()
    for total, cells in groups:
        sudoku.add_cage(total, cells)
    sudoku.solve()
    sudoku.print()

    assert (solution == sudoku.grid).all()


def test_killer2():
    groups = [(20, [(0, 0), (0, 1), (0, 2)]),
              (9, [(0, 3), (1, 3)]),
              (19, [(0, 4), (1, 4), (2, 4)]),
              (7, [(0, 5), (1, 5)]),
              (17, [(0, 6), (0, 7), (0, 8)]),
              (19, [(1, 0), (2, 0), (3, 0), (4, 0)]),
              (5, [(1, 1), (2, 1)]),
              (14, [(1, 2), (2, 2), (2, 3)]),
              (14, [(1, 6), (2, 6), (2, 5)]),
              (15, [(1, 7), (2, 7)]),
              (13, [(1, 8), (2, 8), (3, 8), (4, 8)]),
              (12, [(3, 1), (3, 2), (4, 1)]),
              (14, [(3, 3), (3, 4), (3, 5)]),
              (14, [(3, 6), (3, 7), (4, 7)]),
              (13, [(4, 2), (4, 3)]),
              (20, [(4, 4), (5, 4), (6, 4), (7, 4), (8, 4)]),
              (16, [(4, 5), (4, 6)]),
              (8, [(5, 0), (6, 0)]),
              (16, [(5, 1), (6, 1)]),
              (17, [(5, 2), (5, 3), (6, 3), (7, 3)]),
              (20, [(5, 5), (5, 6), (6, 5), (7, 5)]),
              (9, [(5, 7), (6, 7)]),
              (15, [(5, 8), (6, 8)]),
              (8, [(6, 2), (7, 2)]),
              (6, [(6, 6), (7, 6)]),
              (21, [(7, 0), (7, 1), (8, 1), (8, 0)]),
              (22, [(7, 7), (7, 8), (8, 8), (8, 7)]),
              (17, [(8, 2), (8, 3)]),
              (5, [(8, 5), (8, 6)])]

    solution = np.array([[5, 8, 7, 4, 3, 1, 6, 9, 2],
                         [2, 4, 9, 5, 7, 6, 1, 8, 3],
                         [6, 1, 3, 2, 9, 8, 5, 7, 4],
                         [8, 2, 4, 1, 6, 7, 9, 3, 5],
                         [3, 6, 5, 8, 4, 9, 7, 2, 1],
                         [7, 9, 1, 3, 2, 5, 8, 4, 6],
                         [1, 7, 2, 6, 8, 3, 4, 5, 9],
                         [9, 3, 6, 7, 5, 4, 2, 1, 8],
                         [4, 5, 8, 9, 1, 2, 3, 6, 7]])

    sudoku = KillerSudoku()
    for total, cells in groups:
        sudoku.add_cage(total, cells)
    sudoku.solve()
    sudoku.print()

    assert (solution == sudoku.grid).all()


if __name__ == '__main__':
    test_regular()
    test_killer()
    test_killer2()
